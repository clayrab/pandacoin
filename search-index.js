var searchIndex = JSON.parse('{\
"pandacoin":{"doc":"","t":[6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,4,13,13,3,3,3,13,13,17,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,3,7,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,11,12,11,12,12,12,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6],"n":["Error","Result","block","block_fee","blockchain","crypto","forktree","keypair","longest_chain_queue","output","panda_protos","test_utilities","timestamp_generator","transaction","types","BlockFee","borrow","borrow_mut","deref","deref_mut","drop","from","get_next_fee","init","into","roll_back","roll_forward","try_from","try_into","type_id","Accepted","AcceptedAsLongestChain","AcceptedAsNewLongestChain","AddBlockEvent","AlreadyKnown","AncestorNotFound","BLOCKCHAIN_GLOBAL","Blockchain","ForkChains","InvalidBlock","ParentNotFound","TREASURY","add_block","ancestor_block","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","fmt","fmt","from","from","from","from","get_block_by_hash","init","init","init","init","initialize","into","into","into","into","latest_block","new","new_chain","old_chain","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Message","PARALLEL_HASH_BYTE_THRESHOLD","PublicKey","SECP256K1","Signature","add_exp_assign","as_c_ptr","as_c_ptr","as_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","as_ptr","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","combine","combine_keys","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_compact","from_der","from_der_lax","from_secret_key","from_slice","from_slice","from_str","from_str","hash","hash_bytes","index","index","index","index","index","init","init","init","into","into","into","is_empty","len","make_message_from_string","mul_assign","ne","ne","negate_assign","normalize_s","partial_cmp","partial_cmp","serialize","serialize_compact","serialize_der","serialize_uncompressed","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_bytes_message","verify_string_message","ForkTree","block_by_hash","borrow","borrow_mut","contains_block_hash","deref","deref_mut","drop","fmt","from","init","insert","into","new","remove","try_from","try_into","type_id","Keypair","address","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","fmt","from","from_secret_hex","from_secret_slice","init","into","ne","new","public_key","secret_key","sign_message","sign_string_message","to_owned","to_string","try_from","try_into","type_id","LongestChainQueue","block_hash_by_id","borrow","borrow_mut","clone","clone_into","contains_hash_by_block_id","deref","deref_mut","drop","fmt","from","init","into","latest_block_hash","latest_block_id","new","roll_back","roll_forward","to_owned","try_from","try_into","type_id","OutputIdProto","OutputProto","RawBlockProto","TransactionProto","address","amount","amount","block_fee","block_fee","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","creator","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","encode_raw","encode_raw","encode_raw","encode_raw","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","get_block_fee","get_creator","get_hash","get_id","get_previous_block_hash","get_signature","get_timestamp","hash","hash","hash","id","init","init","init","init","inputs","into","into","into","into","merge_field","merge_field","merge_field","merge_field","merkle_root","message","ne","ne","ne","ne","new","new","new","new","outputs","previous_block_hash","receiver","set_txtype","signature","slip_ordinal","slip_ordinal","timestamp","timestamp","to_owned","to_owned","to_owned","to_owned","transaction_proto","transactions","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_id","tx_id","txtype","txtype","type_id","type_id","type_id","type_id","Normal","Service","TxType","borrow","borrow_mut","clone","clone_into","cmp","default","deref","deref_mut","drop","eq","fmt","from","from_i32","hash","init","into","is_valid","partial_cmp","to_owned","try_from","try_into","type_id","mock_block","mock_timestamp_generator","MockTimestampGenerator","advance","borrow","borrow_mut","deref","deref_mut","drop","from","get_timestamp","init","into","new","try_from","try_into","type_id","SystemTimestampGenerator","TIMESTAMP_GENERATOR_GLOBAL","TimestampGenerator","advance","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","drop","drop","from","from","get_timestamp","init","init","initialize","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","PandaAddress","Sha256Hash"],"q":["pandacoin","","","","","","","","","","","","","","","pandacoin::block_fee","","","","","","","","","","","","","","","pandacoin::blockchain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pandacoin::crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pandacoin::forktree","","","","","","","","","","","","","","","","","","pandacoin::keypair","","","","","","","","","","","","","","","","","","","","","","","","","","","","pandacoin::longest_chain_queue","","","","","","","","","","","","","","","","","","","","","","","pandacoin::panda_protos","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pandacoin::panda_protos::transaction_proto","","","","","","","","","","","","","","","","","","","","","","","","","pandacoin::test_utilities","","pandacoin::test_utilities::mock_timestamp_generator","","","","","","","","","","","","","","","pandacoin::timestamp_generator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pandacoin::types",""],"d":["Error returned by most functions.","A specialized <code>Result</code> type for operations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enumerated types of <code>Transaction</code>s to be handlded by …","","","","The structure represents the state of the blockchain …","","","","Initial Treasury","Append <code>Block</code> to the index of <code>Blockchain</code> These …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the block is in the fork","","","","","","","","","","","Create new <code>Blockchain</code>","","","","","","","","","","","","","","","","A (hashed) message input to an ECDSA signature","","A Secp256k1 public key, used for verification of …","A global, static context to avoid repeatedly creating …","An ECDSA signature","Adds the pk corresponding to <code>other</code> to the pk <code>self</code> in place…","","","","","","","Converts the object to a mutable raw pointer for FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Converts the object to a raw pointer for FFI interfacing","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw pointer suitable for use with FFI functions","Gets a reference to the underlying array","","","","","","","","","","","","","","","Adds a second key to this one, returning the sum. Returns …","Adds the keys in the provided slice together, returning …","","","","","","","","","","","","","","","","","","","Converts a 32-byte hash directly to a message without …","","","","","","Converts a 64-byte compact-encoded byte slice to a …","Converts a DER-encoded byte slice to a signature","Converts a “lax DER”-encoded byte slice to a …","Creates a new public key from a secret key.","<strong>If you just want to sign an arbitrary message use …","Creates a public key directly from a slice","","","","","","","","","","","","","","","","Returns whether the object as an array is empty","Returns the length of the object as an array","Hash the message string with sha256 for signing by …","Muliplies the pk <code>self</code> in place by the scalar <code>other</code> Will …","","","Negates the pk to the pk <code>self</code> in place Will return an …","Normalizes a signature to a “low S” form. In ECDSA, …","","","Serialize the key as a byte-encoded pair of values. In …","Serializes the signature in compact format","Serializes the signature in DER format","Serialize the key as a byte-encoded pair of values, in …","","","","","","","","","","","","","","","Verify a message signed by secp256k1. Message is a byte …","Verify a message signed by secp256k1. Message is a plain …","This class is used to store all blocks in a tree …","","","","","","","","","","","","","Create new <code>ForkTree</code>","","","","","An secp256k1 keypair for signing and verifying messages","Get the public key of the keypair in base58(i.e. address) …","","","","","","","","","","formats a Keypair for println!","","Create and return a keypair with  the given hex u8 array …","Create and return a keypair with  the given hex u8 array …","","","","Create and return a keypair with a randomly generated …","Get the public key of the keypair as …","Get the private key as a hex-encoded string","Hash and sign message bytes","Hash and sign a message string","","","","","","","","","","","","","","","","","","","","","","Create new <code>LongestChainQueue</code>","","","","","","","","","","","Returns address in <code>Slip</code>","Returns amount of COIN in <code>Slip</code>","","Returns the value of <code>block_fee</code>, or the default value if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>hash</code>, or the default value if <code>hash</code> …","","","","","","","","","","","","","","","","","","","","","","Create new <code>OutputIdProto</code>","","Creates new <code>Transaction</code>","Creates a new block using the global keypair.","","","","Sets <code>txtype</code> to the provided enum value.","","Returns the <code>Slip</code>","","","","","","","","Nested message and enum types in <code>TransactionProto</code>.","","","","","","","","","","Returns the <code>Transaction</code> id the slip originated from","","Returns the enum value of <code>txtype</code>, or the default if the …","","","","","","","","","","","","","","","","","","","","","Converts an <code>i32</code> to a <code>TxType</code>, or <code>None</code> if <code>value</code> is not a …","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>TxType</code>.","","","","","","","","This is a mock impl of TimestampGenerator which can be …","","","","","","","","","","","","","","","This is simply a wrapper for the system clock which …","","A trait used for getting timestamps. The purpose of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The proto library will not decode to an array, only a …","Sha256Hash byte array type"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,0,2,2,0,0,0,2,2,0,3,4,4,5,2,3,4,5,2,3,2,2,4,5,5,2,3,4,5,2,3,4,5,2,3,2,2,3,4,5,2,3,3,4,5,2,3,5,4,5,2,3,3,3,4,4,2,4,5,2,3,4,5,2,3,4,5,2,3,0,0,0,0,0,6,7,6,8,7,6,8,7,6,8,7,6,8,7,7,6,8,7,6,8,7,6,8,7,6,8,7,6,6,6,7,6,8,7,6,8,7,6,8,7,6,8,7,6,6,6,8,8,7,7,6,6,8,8,8,8,8,6,7,6,6,8,6,0,7,7,7,7,7,7,6,8,7,6,8,7,7,0,6,6,8,6,8,7,6,6,8,8,6,7,6,8,6,8,7,6,8,7,6,8,7,6,8,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,12,12,12,13,13,14,12,15,13,14,12,15,13,14,12,15,13,14,12,15,13,14,12,15,13,13,14,12,15,13,14,12,15,13,14,12,15,13,14,12,15,13,14,12,15,13,14,12,15,13,14,12,15,13,14,12,15,13,14,12,15,13,13,13,13,13,13,13,13,14,13,13,13,14,12,15,13,15,14,12,15,13,14,12,15,13,13,15,14,12,15,13,14,12,15,13,15,13,12,15,13,14,14,15,13,14,12,15,13,0,13,14,12,15,13,14,12,15,13,14,14,15,15,14,12,15,13,16,16,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,18,19,20,19,20,19,20,20,19,20,19,20,19,20,18,19,20,20,19,20,19,19,20,19,20,19,20,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["u64",15]],[[],["usize",15]],[[]],[[["rawblockproto",3]]],[[["rawblockproto",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["rawblockproto",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["addblockevent",4]],[[]],[[["usize",15]]],[[],["arc",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["addblockevent",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["sha256hash",6]],[["rawblockproto",3],["option",4,["rawblockproto"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],[["rawblockproto",3],["option",4,["rawblockproto"]]]],[[]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[["secp256k1",3]],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["message",3]],[[],["publickey",3]],[[],["signature",3]],[[]],[[]],[[]],[[["message",3]],["ordering",4]],[[["publickey",3]],["ordering",4]],[[["publickey",3]],[["error",4],["publickey",3],["result",4,["publickey","error"]]]],[[],[["error",4],["publickey",3],["result",4,["publickey","error"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["message",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[],["message",3]],[[]],[[["publickey",3]],["publickey",3]],[[]],[[]],[[["signature",3]],["signature",3]],[[],[["signature",3],["result",4,["signature","error"]],["error",4]]],[[],[["signature",3],["result",4,["signature","error"]],["error",4]]],[[],[["signature",3],["result",4,["signature","error"]],["error",4]]],[[["secretkey",3],["secp256k1",3]],["publickey",3]],[[],[["error",4],["message",3],["result",4,["message","error"]]]],[[],[["error",4],["publickey",3],["result",4,["publickey","error"]]]],[[["str",15]],[["error",4],["publickey",3],["result",4,["publickey","error"]]]],[[["str",15]],[["signature",3],["result",4,["signature","error"]],["error",4]]],[[]],[[],["sha256hash",6]],[[["usize",15],["rangeto",3,["usize"]]]],[[["range",3,["usize"]],["usize",15]]],[[["usize",15]],["u8",15]],[[["rangefull",3]]],[[["usize",15],["rangefrom",3,["usize"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[["str",15]],["sha256hash",6]],[[["secp256k1",3]],[["result",4,["error"]],["error",4]]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["secp256k1",3]]],[[]],[[["message",3]],[["option",4,["ordering"]],["ordering",4]]],[[["publickey",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[],["serializedsignature",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["signature",3],["vec",3]],["bool",15]],[[["str",15]],["bool",15]],null,[[["sha256hash",6]],[["rawblockproto",3],["option",4,["rawblockproto"]]]],[[]],[[]],[[["sha256hash",6]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[["rawblockproto",3],["sha256hash",6]],[["rawblockproto",3],["option",4,["rawblockproto"]]]],[[]],[[]],[[["sha256hash",6]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["string",3]],[[]],[[]],[[],["keypair",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["keypair",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["str",15]],[["result",4,["keypair","box"]],["keypair",3],["box",3,["error"]]]],[[],[["keypair",3],["result",4,["keypair","error"]],["error",4]]],[[],["usize",15]],[[]],[[["keypair",3]],["bool",15]],[[],["keypair",3]],[[],["publickey",3]],[[],["secretkey",3]],[[],["signature",3]],[[["str",15]],[["error",3],["result",4,["string","error"]],["string",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["u32",15]],["sha256hash",6]],[[]],[[]],[[],["longestchainqueue",3]],[[]],[[["sha256hash",6],["u32",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["sha256hash",6]],[[],["u32",15]],[[]],[[],["sha256hash",6]],[[["sha256hash",6]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[],["pandaaddress",6]],[[],["u64",15]],null,[[],["u64",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["outputidproto",3]],[[],["outputproto",3]],[[],["transactionproto",3]],[[],["rawblockproto",3]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["outputidproto",3]],["bool",15]],[[["outputproto",3]],["bool",15]],[[["transactionproto",3]],["bool",15]],[[["rawblockproto",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["publickey",3]],[[],["sha256hash",6]],[[],["u32",15]],[[],["sha256hash",6]],[[],["signature",3]],[[],["u64",15]],[[]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[["decodecontext",3],["u32",15],["wiretype",4]],[["decodeerror",3],["result",4,["decodeerror"]]]],[[["decodecontext",3],["u32",15],["wiretype",4]],[["decodeerror",3],["result",4,["decodeerror"]]]],[[["decodecontext",3],["u32",15],["wiretype",4]],[["decodeerror",3],["result",4,["decodeerror"]]]],[[["decodecontext",3],["u32",15],["wiretype",4]],[["decodeerror",3],["result",4,["decodeerror"]]]],null,null,[[["outputidproto",3]],["bool",15]],[[["outputproto",3]],["bool",15]],[[["transactionproto",3]],["bool",15]],[[["rawblockproto",3]],["bool",15]],[[["sha256hash",6],["u32",15]]],[[["u64",15],["publickey",3]],["outputproto",3]],[[["u64",15],["vec",3,["outputproto"]],["u8",15],["outputproto",3],["vec",3,["outputidproto"]],["outputidproto",3],["txtype",4],["vec",3,["u8"]]]],[[["u64",15],["publickey",3],["u32",15],["sha256hash",6]]],null,null,null,[[["txtype",4]]],null,[[],["u32",15]],null,null,null,[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["sha256hash",6]],null,[[],["txtype",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[],["txtype",4]],[[]],[[["txtype",4]],["ordering",4]],[[],["txtype",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["txtype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["i32",15]],[["txtype",4],["option",4,["txtype"]]]],[[]],[[],["usize",15]],[[]],[[["i32",15]],["bool",15]],[[["txtype",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[["u64",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["u64",15]],[[],["usize",15]],[[]],[[],["mocktimestampgenerator",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[["u64",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["box",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["u64",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[3,"BlockFee"],[4,"AddBlockEvent"],[3,"Blockchain"],[3,"ForkChains"],[3,"BLOCKCHAIN_GLOBAL"],[3,"PublicKey"],[3,"Message"],[3,"Signature"],[3,"ForkTree"],[3,"Keypair"],[3,"LongestChainQueue"],[3,"OutputProto"],[3,"RawBlockProto"],[3,"OutputIdProto"],[3,"TransactionProto"],[4,"TxType"],[3,"MockTimestampGenerator"],[8,"TimestampGenerator"],[3,"SystemTimestampGenerator"],[3,"TIMESTAMP_GENERATOR_GLOBAL"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};